---
title: "klasser och objekt"
subtitle: "R: Från datahantering till visualisering"


---

```{r}
#| echo: false

library(tidyverse)
library(quartomonothemer)
library(showtext)

showtext_auto()

style_mono_quarto(
  font_title = "Josefin Sans",        # Sets the font style for slide titles.
  font_text = "Roboto",              # Specifies the font for the main body text.
  font_code = "Fira Code",
  font_sans = "Noto Sans",           # Defines a fallback sans-serif font for compatibility.
  color_base = "#3a5137",            # Sets the primary base color for slides, often used for headings or backgrounds.
  color_accent = "#795b7e",          # Accent color used for highlights, such as borders or key points.
  color_link = "#ebc34c",            # Color applied to hyperlinks on the slides.
  color_code = "#e1800f",            # Color for inline code and code blocks. #e1800f , f39726
  color_bg = "#ffffff",
  size_base = 20,                    # Base font size for the slides, affecting readability.
  google_fonts = c("Roboto", "Roboto Condensed", "Josefin Sans", "Noto Sans"), # Specifies the Google Fonts to be downloaded and used in the slides.
  table_engine = "gt",
  path_scss = "quartomonothemer.scss" # Path to the SCSS file where additional theming customization can be applied.
)
```

## En avancerad kalkylator 

:::incremental
- **R** kan användas som en avancerad kalkylator, vilket möjliggör både enkla och komplexa beräkningar.
- För att effektivt utföra beräkningar i R finns det vissa regler och principer att följa.
- Dessutom finns det en del ovanliga operatorer som är bra att kunna för transformation av variabler senare i kursen.
:::


## Grundläggande beräkningar

::: {.fragment .fade-in-then-semi-out}
```{r}
1 + 2    # Addition
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
3 - 1    # Subtraktion
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2 * 3    # Multiplikation
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
5 / 2    # Division
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2^3      # Upphöjt till/exponent
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
5 %/% 2  # Heltalsdivision: Resultatet blir 2 (heltalsdelen)
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
5 %% 2   # Resten vid heltalsdivision: Resultatet blir 1 (x mod y)
```
:::

------------------------------------------------------------------------

## Aritmetik - Operatorernas Prioritet

::: {.fragment .fade-in-then-semi-out}
```{r}
1 / 2 * 3   # vänster till höger
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
1 + 2 * 3   # prioritet: */ före +-
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
(1 + 2) * 3 # ändra ordning med parenteser
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2^1/2       # prioritet av ^ före /
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2^(1/2) # parenteser för att justera ordning
```
:::

------------------------------------------------------------------------

## Jämförelser

::: {.fragment .fade-in-then-semi-out}
```{r}
2 > 1   # större än
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2 >= 2  # större än eller lika med
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2 < 1   # mindre än
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
2 <= 1  # mindre än eller lika med
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
1 == 1  # == ... lika med
```
:::

::: {.fragment .fade-up}
```{r}
1 != 1  # != ... ej lika med
```
:::

## Logiska operatorer

::: {.fragment .fade-in-then-semi-out}
```{r}
(2 > 1) & (1 > 2)   # &: logiskt OCH (Två är större än ett och ett är större än två.)
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
(2 < 1) | (1 < 2)   # |: logiskt ELLER
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
(1 < 1) | !(1 < 1)  # !: logisk negation, 

```
:::



##  {background-color="#344956"}

::: center-large-bold-yellow
Objekt och klasser
:::


## Allt i R är ett objekt.

Varje objekt har en klass

-   Klasser i R definierar typen av objekt och bestämmer hur objektet beter sig i olika sammanhang. 

-   Information om klassen hjälper oss att förstå vilka operationer som kan utföras på objektet

| **Klass**                           | **Objekt**                             |
|-------------------------------------|----------------------------------------|
| En mall eller ritning               | En konkret instans av en klass          |
| Definierar egenskaper och beteenden | Har egenskaper och kan utföra beteenden|
| Exempel: data.frame, numeric, list  | Exempel: df, num_vec, my_list           |


## Klasser

::: incremental
-   `Data Frames`: Tabeller där varje kolumn kan ha olika datatyper.
    Används för att lagra dataset.
-   `Tibbles`: En modern version av data frames, ofta använd i
    tidyverse.
    -   `Vektorer` eller variabler: En grundläggande datastruktur med
        element av samma typ.
        -   `Numerical`: Numerisk: Tal, antingen heltal (`int`) eller
            reella tal med decimaler (`dbl`).\
        -   `Character`: Kategoriska data (`chr`), till exempel namn.\
        -   `Factor`: Kategorisk data lagrade som nivåer (`fct`).
            Användbart vid modellering.\
        -   `Logical`: TRUE eller FALSE värde (`lgl`).
:::

## Andra datastrukturer är:

::: incremental
-   `listor` En flexibel datastruktur som kan innehålla olika typer av
    objekt.\
-   `arrays` Flerdimensionella strukturer som lagrar element av samma
    typ.\
-   `matrices` En tvådimensionell datastruktur där alla element har
    samma typ.
:::

. . .

<br>

Använd `class()` för att se vilken typ av objekt något är.

## Objekt

::: {.fragment .fade-in-then-semi-out}
I konsolen går det att utföra olika kalkulationer.
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
1 / 200 * 30

(59 + 73 + 2) / 3
```
:::

::: {.fragment .fade-in-then-semi-out}
Men dessa är inte ett sparat objekt (i R miljön) innan pil (`<-`) symbolen används (går även att
använda `=`, men de flesta förespråkar `<-`)
:::

::: {.fragment .fade-in-then-semi-out}
Ett sparat objekt kan återanvändas!
:::

## Objekt

::: {.fragment .fade-in-then-semi-out}
```{r}
x <- 3 * 4
```
:::

::: {.fragment .fade-in-then-semi-out}
För att visa detta objekt kan du skriva x i konsolen och trycka på enter
alternativt markera objektet i ett script och använda
tangentkombinationen `cmd/ctrl + enter`
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
x
```
:::

::: {.fragment .fade-in-then-semi-out}
Vad är x för typ av objekt?
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
class(x)
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
length(x) # hur många element/värden innehåller objektet
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
is.vector(x) # Är ett element/värde fortfarande en vektor?
```
:::


##  {background-color="#344956"}

::: center-large-bold-yellow
Numeriska vektorer 
:::


## Vektorer

::: {.fragment .fade-in-then-semi-out}
För att skapa en vektor som är längre än ett värde används `c()`, som
betyder concatonate, men kan vara lättare att tänka på som combine.


```{r}
primtal <- c(2, 3, 5, 7, 11, 13)

primtal
```

:::

::: {.fragment .fade-in-then-semi-out}
**Multiplikation med vektorer**
:::

::: {.fragment .fade-in-then-semi-out}
Om vi multilicerar vår nya vektor med ett tal kommer alla värden bli
gånger det talet
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
# muliplar av primtalen
primtal * 2
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
primtal * primtal # Här multipliceras varje element i vektorn primtal med motsvarande element i samma vektor.
```
:::



## Multiplikation med vektorer

::: {.fragment .fade-in-then-semi-out}
Multiplikation av en vektor med en kortare vektor
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
primtal * c(1, 2)


```
:::

::: {.fragment .fade-in-then-semi-out}
R använder en princip som kallas vektoråtervinning:\
- Den kortare vektorn (c(1, 2)) upprepas automatiskt för att matcha
längden på den längre vektorn (primtal).\

Beräkningar:\
- 2 \* 1 = 2\
- 3 \* 2 = 6\
- 5 \* 1 = 5 (börjar om med 1)\
- 7 \* 2 = 14\
- och så vidare\
:::



::: {.fragment .fade-in-then-semi-out}
```{r warning=TRUE}
primtal + c(1, 2, 3, 4)

```
:::

##  {background-color="#344956"}

::: center-large-bold-yellow
Character vector/textvektorer
:::

## Character/textvektorer

- **Character vector/textvektor:**
  - En grundläggande datatyp i R för att lagra textdata.
  - Representera kategoriska data som kön, utbildningsnivå, geografisk region.
  - Varje cell i en textvektor består av en sekvens av tecken (Strings).
- **Strings:**
  - Enskilda element inom en teckenvektor.
  - Representerar text, som ord eller fraser.




## 

::: {.fragment .fade-in-then-semi-out}
```{r}

x <- "nytt x värde"

```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
x
```
:::

::: {.fragment .fade-in-then-semi-out}

```{r}
 
frukter <- c("Äpple", "Banan", "Apelsin", "Druva")
frukter
```
:::

::: {.fragment .fade-in-then-semi-out}
Om man har båda text och siffror

```{r}
y <- c("arton", 23, 27)

class(y)

```
:::

## Sortera variabler

::: {.fragment .fade-in-then-semi-out}
```{r}
frukter
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
sort(frukter)
```
:::


::: {.fragment .fade-in-then-semi-out}
```{r}
manader <- c("Augusti", "Februari", "Januari", "December", 
                        "Mars", "Maj", "September", "April", 
                        "November", "Juni", "Oktober", "Juli")

sort(manader)
```
:::


##  {background-color="#344956"}

::: center-large-bold-yellow
Faktorer 
:::


## Faktorer

- En **factor** är en datastruktur i R som används för att hantera kategorisk data.

- Representerar variabler som har ett begränsat antal unika värden, kallade **nivåer/levels**.

  -    **Statistisk analys:** Säkerställer att kategoriska variabler behandlas korrekt i modeller.
  -    **Ordning:** Möjlighet att definiera ordnade kategorier (t.ex. låg, medium, hög).
  -    **Effektiv lagring:** Sparar minne genom att lagra data som numeriska index istället för teckensträngar.


## Oordnade faktorer

::: {.fragment .fade-in-then-semi-out}
-   Kategorier utan inbördes ordning.
-   Exempel: Färger ("Röd", "Grön", "Blå") eller städer ("Stockholm",
    "Göteborg", "Malmö").
:::

::: {.fragment .fade-in-then-semi-out}
```{r}

farger <- factor(x = c("Röd", "Grön", "Blå", "Grön", "Röd"))
farger
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
städer <- factor(x = c("Stockholm", "Göteborg", "Malmö", "Göteborg"))
print(städer)
```
:::

<br>

## Ordnade faktorer

::: {.fragment .fade-in-then-semi-out}
-   Kategorier med en logisk ordning.  
-   Månad (Januari<December).  
-   Utbildningsnivåer ("Gymnasiet" \< "Kandidatexamen" \<
    "Master").
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
factor(x = c("Gymnasiet", "Kandidatexamen", "Master"),
       ordered = TRUE)
```
:::

## Oordnad

::: {.fragment .fade-in-then-semi-out}
```{r}
manader
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
manader_factor <- factor(
  manader, 
  levels = c(
    "Januari", "Februari", "Mars", "April", 
    "Maj", "Juni", "Juli", "Augusti", 
    "September", "Oktober", "November", "December"
  )
)

manader_factor


```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
sort(manader_factor)
```

:::

## Ordnad
::: {.fragment .fade-in-then-semi-out}
```{r}
#| code-line-numbers: 8|9
manader_ordered <- factor(
  manader, 
  levels = c(
    "Januari", "Februari", "Mars", "April", 
    "Maj", "Juni", "Juli", "Augusti", 
    "September", "Oktober", "November", "December"
  ),
  ordered = TRUE)

manader_ordered
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
sort(manader_factor)
```
:::


## När spelar det roll?

-   Ordnade faktorer kan jämföra kategorier med operationer som \< eller \>.
-   Sortering av data, för både oordnad och ordnad faktor sorteras data efter
    levels-ordning.
-   Statistiska analyser, tex: vad ska referensen/jämförelsegruppen vara
-   Kontraster visas annorlunda för ordnade och oordnade faktorer
-   För att få rätt ordning i figurer fungerar både ordnade och oordnade faktorer


##  {background-color="#344956"}
::: center-large-bold-yellow
Rektangulär data
:::


## Data frame eller en tibble

Skapa vektorer

```{r}
#| emphasize-lines: 1, 2, 3
namn <- sample(c("Anna", "Björn", "Cecilia", "David", "Elin", "Fredrik", "Gabriella", "Henrik", "Isabella", "Johan", "Karin", "Lars", "Maria", "Niklas", "Oskar"), 30, replace = TRUE)
alder <- sample(20:40, 30, replace = TRUE)
stad <- sample(c("Stockholm", "Göteborg", "Malmö", "Uppsala", "Lund", "Västerås", "Örebro", "Linköping", "Helsingborg", "Norrköping", "Jönköping", "Umeå", "Gävle", "Borås", "Eskilstuna"), 30, replace = TRUE)
```

---

Av dessa kan vi skapa en data frame

::: {.fragment .fade-in-then-semi-out}
```{r, results='verbatim'}
df <- data.frame(Namn = namn, Alder = alder, Stad = stad)

```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
print(df)
```
:::

---

Och även en tibble

::: {.fragment .fade-in-then-semi-out}
```{r}
library(tibble)

tb <- tibble(Namn = namn, Alder = alder, Stad = stad)
```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
print(tb)
```
:::
::: {.fragment .fade-in-then-semi-out}
Skillnader: - Data frames visar hela datan direkt. Tibbles visar bara en
förhandsvisning av data (10 rader).\
- Tibbles visar vilken datatyp varje vektor är.\
- Tibbles tillåter variabelnamn med mellanslag eller specialtecken (bra
att undvika, men kan vara användbart vid skapande av figurer eller
tabeller).\
:::

##  {background-color="#344956"}

::: center-large-bold-yellow
Funktioner 
:::


## Funktioner

:::incremental
Funktioner är också objekt, antagligen den vanligaste objekttypen i R.\

Många funktioner i R är namngivna på ett sätt som ger en bra ledtråd om
vad de gör.\
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
medelvärde <- mean(c(10, 20, 30))
medelvärde
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
summa <- sum(c(10, 20, 30))
summa
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
antal <- length(c(10, 20, 30))
antal
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
sorterade <- sort(c(30, 10, 20))
sorterade
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
seq(1, 10, by = 2)
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
rep(5, times = 3)
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
round(3.14159, digits = 2)
```
:::

## Argument i funktioner

Vad är argument? - Argument är indata som en funktion tar emot för att
utföra sitt arbete.\
- De kan vara obligatoriska eller valfria.\
- Valfria argument har standardvärden som används om inget anges.

Exempel: Funktionen `mean()`, `mean()` tar flera argument, inklusive:\
- `x`: En vektor med numeriska värden (obligatoriskt).\
- `na.rm`: Ett logiskt värde som anger om NA-värden ska ignoreras
(valfritt).

::: {.fragment .fade-in-then-semi-out}
```{r}
# Användning av mean() med endast det obligatoriska argumentet
en_vektor <- c(10, 20, 30, NA)
medel <- mean(en_vektor)
medel

```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
# Användning av mean() med både obligatoriska och valfria argument
medel_utan_na <- mean(en_vektor, na.rm = TRUE)
medel_utan_na

```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
# Inspektera argumenten i en funktion
args(mean)

```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
# Läs mer om funktionen
?mean

```
:::

## Går att använda diverse funktioner på textdata
::: {.fragment .fade-in-then-semi-out}
```{r}
frukter
```
:::

::: {.fragment .fade-in-then-semi-out}

```{r}
stora_frukter <- toupper(frukter)
stora_frukter
```
:::



::: {.fragment .fade-in-then-semi-out}
```{r}
substr(x = frukter, start = 1, stop =  3)
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
substr(frukter, 1, 3)
```
:::


## Byta klass på vektorer

Använd funktionerna `as.character()`, `as.integer()`, `as.logical()`, `as.numeric()` eller `as.factor()`

::: {.fragment .fade-in-then-semi-out}
```{r}
# Skapa en numerisk vektor
numeriskvektor <- c(1, 2, 3, 4, 5)
numeriskvektor
```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
# Konvertera till textvektor
textvektor <- as.character(numeriskvektor)
textvektor
```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
# Konvertera tillbaka till numerisk
numeriskvektor2 <- as.numeric(textvektor)
numeriskvektor2
```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
# Konvertera till faktor
faktorvektor <- as.factor(textvektor)
faktorvektor
```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
# Konvertera faktor tillbaka till numerisk korrekt
numeriskfrukt <- as.numeric(as.character(faktorvektor))
numeriskfrukt
```
:::
## Bra att veta

::: {.fragment .fade-in-then-semi-out}
Vi skapar ett nytt objekt

```{r}
R_kod <- 666
```
:::

::: {.fragment .fade-in-then-semi-out}
Sen vill vi undersöka vad objektet innehåller

```{r}
#| eval: false
# r_kod
#> Error: object 'r_kod' not found

```
:::

::: incremental
-   Stor och liten bokstav spelar roll

-   andra saker som spelar roll är

-   inte ha mellanrum i variabelnam

-   variabelnamn ska inte börja med en siffra

-   Undvik tecken som !, \@, #, \$, %, osv. i variabelnamn.

-   Undantag: \_ (understreck) och . (punkt) är tillåtna.

-   Använd tydliga och läsbara namn, som my_variable eller myVariable
    (camelCase).

-   Decimaltecken är alltid `.`, medan `,` används för att separera
    argument eller tal.
:::


##  {background-color="#344956"}

::: center-large-bold-yellow
Bas R
:::


## Bas R operatorer

Dollartecken (`$`): Åtkomst till kolumner i data frames

::: incremental
-   Används för att få åtkomst till en specifik vektor i en data frame eller tibble
    med hjälp av vektorns namn.
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
data <- data.frame(A = c(1, 2, 3), B = c("X", "Y", "Z"))
data
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
data$A  # Åtkomst till vektor 'A'
```
:::

------------------------------------------------------------------------

**Enkla hakparenteser `[]`:**

::: incremental
-   **Bevarar datastrukturen.**

    -   När du använder `[]` på en data frame eller en lista, behåller
        resultatet samma struktur som originalet.
    -   Kan extrahera rader eller kolumner eller en specifik cell
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
data
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
    data[1, ]  
```
:::
::: {.fragment .fade-in-then-semi-out}
```{r}
    data[ , 1]  
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}

data[1, 1]  


```
:::

## **Dubbla hakparenteser `[[]]`:**

::: incremental
-   **Extraherar specifika element utan att bevara strukturen.**

    -   Används för att hämta ett specifikt element ur en lista eller en
        kolumn från en data frame som en ren vektor.
    -   Exempel:
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
    list_data <- list(A = 1:3, B = c("X", "Y", "Z"))
    list_data[[1]] 
    
    is.vector( list_data[[1]] )
```
:::

## **Skillnad mellan `[]` och `[[]]`:**

::: incremental
1.  **För listor:**

    -   `[]` returnerar en ny lista som innehåller det valda elementet
        (strukturen bevaras).
    -   `[[]]` returnerar själva innehållet i det valda elementet.
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
 list_data <- list(A = 1:3, B = c("X", "Y", "Z"))
list_data
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
   
    list_data[1]    # En lista med elementet A
    list_data[[1]]  # Själva innehållet i A (vektorn 1:3)
```
:::

## **Skillnad mellan `[]` och `[[]]`:**

::: incremental
2.  **För data frames:**

    -   `[]` används för att välja rader eller kolumner medan man
        behåller data frame-strukturen.
    -   `[[]]` används för att hämta en kolumn som en vektor.
:::

::: {.fragment .fade-in-then-semi-out}
```{r}
    data <- data.frame(A = c(1, 2, 3), B = c("X", "Y", "Z"))
data
```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}

data[1]      # En data frame med första kolumnen

```
:::

::: {.fragment .fade-in-then-semi-out}
```{r}


data[[1]]    # En vektor med värdena i första kolumnen
```
:::
